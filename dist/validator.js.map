{"version":3,"file":"validator.js","sourceRoot":"","sources":["../src/validator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as request from 'request';\r\nimport * as cheerio from 'cheerio';\r\nclass Validator {\r\n\r\n    public _ltc: String;\r\n    public _stc: String;\r\n    public _$: CheerioStatic;\r\n    public _allRelativeLinks: String[];\r\n    public _allAbsoluteLinks: String[];\r\n\r\n    constructor(ltc: String, stc: String) {\r\n        console.log('initializing class: Validator');\r\n        this._ltc = ltc;\r\n        this._stc = stc;\r\n        this._allRelativeLinks = [];\r\n        this._allAbsoluteLinks = [];\r\n        console.log(this._stc);\r\n        // this.collectInternalLinks(this._$);\r\n        this.requestUrl();\r\n    }\r\n\r\n    requestUrl() {\r\n        let rt = this;\r\n        let dataPromise = new Promise((resolve, reject) => {\r\n            request(this._stc.toString(), (error, response, body) => {\r\n                if (error) {\r\n                    reject('Error: ' + error);\r\n                }\r\n                if (response.statusCode === 200) {\r\n                    //parse the document\r\n                    let $ = cheerio.load(body);\r\n                    //pick all internal links\r\n                    this.collectInternalLinks($);\r\n                    //pick page title of browsed page\r\n                    const pageTitle = $('title').text();\r\n                    let hasLink = rt.findLink();\r\n                    //construct result object\r\n                    let crawlerResult = {\r\n                        'pageTitle': pageTitle,\r\n                        'hasLink': hasLink,\r\n                        'links': this._allAbsoluteLinks\r\n                    }\r\n                    console.log(hasLink);\r\n                    resolve(crawlerResult);\r\n                }\r\n            });        \r\n        });\r\n        return dataPromise; \r\n    }\r\n\r\n    collectInternalLinks($) {    \r\n        let rt = this;  \r\n        let relativeLinks = $(\"a[href^='/']\");\r\n        relativeLinks.each(function() {\r\n            rt._allRelativeLinks.push($(this).attr('href'));\r\n        });\r\n        let absoluteLinks = $(\"a[href^='http']\");\r\n        absoluteLinks.each(function() {\r\n            rt._allAbsoluteLinks.push($(this).attr('href'));\r\n        });\r\n    }\r\n\r\n    findLink(): boolean {\r\n        let found = false;\r\n        this._allAbsoluteLinks.forEach((link) => {\r\n            console.log(link.localeCompare(this._ltc.toString()));\r\n            if (link.localeCompare(this._ltc.toString()) == 0) {\r\n                found = true;\r\n            }\r\n        });\r\n        return found;\r\n    }\r\n\r\n}\r\n\r\nexport { Validator }"]}